diff --git a/README.txt b/README.txt
index d512f23..93fd656 100644
--- a/README.txt
+++ b/README.txt
@@ -8,40 +8,42 @@ who based code on the Google Analytics module by Mike Carter www.ixis.co.uk
 
 Description
 ===========
-Adds the AdobeAnalytics analytics system to your website.
+Adds the Adobe Analytics system to your website.
 
 
 Requirements
 ============
 
-* SiteCatalyst user account
+* Adobe Analytics user account
 
 
 Installation
 ============
-* Copy the 'adobeanalytics' module directory in to your Drupal
+* Copy the 'adobe_analytics' module directory in to your Drupal
 modules directory as usual.
 
 
 Customization
 =============
 Here is an example of module code that you can use to create variables more
-suited to tracking your needs by utilizing hook_adobeanalytics_variables(). This
-code should go in your custom module's .module file and modified accordingly.
-For illustration purposes we are adding a setting to the adobeanalytics
-administration form to allow site administrators to control whether or not they
-want to track our custom "referring_search_engine" variable.
+suited to tracking your needs by utilizing hook_adobe_analytics_variables().
+This code should go in your custom module's .module file and modified
+accordingly.  For illustration purposes we are adding a setting to the
+adobe_anlaytics administration form to allow site administrators to control
+whether or not they want to track our custom "referring_search_engine"
+variable.
+
 Note: Do not forget to rename the functions.
 
 <?php
 
   /**
-   * Implements hook_adobeanalytics_variables().
+   * Implements hook_adobe_analytics_variables().
    */
-  function mymodule_adobeanalytics_variables() {
+  function mymodule_adobe_analytics_variables() {
   // Initialize a variables array to be returned by this hook.
   $variables = array();
-  $config_var = \Drupal::config('adobeanalytics.settings')->get('track_search_engine', 0);
+  $config_var = \Drupal::config('adobe_anlaytics.settings')->get('track_search_engine', 0);
   if ($config_var) {
     $variables['referring_search_engine'] = 'none';
 
@@ -72,11 +74,11 @@ Note: Do not forget to rename the functions.
   /**
    * Implements hook_form_FORM_ID_alter().
    */
-  function mymodule_form_adobeanalytics_admin_settings_alter(&$form, &$form_state) {
-    $form['general']['adobeanalytics_track_search_engine'] = array(
+  function mymodule_form_adobe_anlaytics_admin_settings_alter(&$form, &$form_state) {
+    $form['general']['adobe_anlaytics_track_search_engine'] = array(
       '#type' => 'checkbox',
       '#title' => t('Track the referring search engine for every request'),
-      '#default_value' => \Drupal::config(adobeanalytics . settings)->get('track_search_engine', 0),
+      '#default_value' => \Drupal::config(adobe_anlaytics . settings)->get('track_search_engine', 0),
     );
   }
 
diff --git a/adobe_analytics.info.yml b/adobe_analytics.info.yml
new file mode 100644
index 0000000..6bee604
--- /dev/null
+++ b/adobe_analytics.info.yml
@@ -0,0 +1,5 @@
+name: Adobe Analytics
+description: "Adds Adobe Analytics javascript tracking code to your site's pages."
+type: module
+core: 8.x
+configure: adobe_analytics.settings
diff --git a/adobe_analytics.links.menu.yml b/adobe_analytics.links.menu.yml
new file mode 100644
index 0000000..24047c0
--- /dev/null
+++ b/adobe_analytics.links.menu.yml
@@ -0,0 +1,6 @@
+adobe_analytics.admin:
+  title: 'Adobe Analytics'
+  description: 'Configure the settings used to integrate Adobe Analytics.'
+  parent: system.admin_config_system
+  route_name: adobe_analytics.settings
+  weight: 100
diff --git a/adobe_analytics.module b/adobe_analytics.module
new file mode 100644
index 0000000..43ebbf6
--- /dev/null
+++ b/adobe_analytics.module
@@ -0,0 +1,166 @@
+<?php
+
+/**
+ * @file
+ * Adds the Javascript to the bottom of Drupal page.
+ */
+
+use \Drupal\Core\Routing\RouteMatchInterface;
+
+/**
+ * Implements hook_help().
+ */
+function adobe_analytics_help($route_name, RouteMatchInterface $route_match) {
+
+  switch ($route_name) {
+    case 'help.page.adobe_analytics':
+      return ['#markup' => '<p>' . t('Settings for AdobeAnalytics.') . '</p>'];
+  }
+}
+
+/**
+ * Implements template_preprocess_html().
+ */
+function adobe_analytics_page_bottom(&$variables) {
+
+  $user = \Drupal::currentUser();
+  $config = \Drupal::config('adobe_analytics.settings');
+  $adobe_analytics_helper = \Drupal::service('adobe_analytics.adobe_analytics_helper');
+
+  // Check if we should track the currently active user's role.
+  $track_user = TRUE;
+  $get_roles = array();
+  $tracking_type = $config->get('role_tracking_type');
+  $stored_roles = $config->get('track_roles');
+  if ($stored_roles) {
+    $get_roles = array();
+    foreach ($stored_roles as $key => $value) {
+      if ($value) {
+        // Get all the selected roles.
+        $get_roles[$key] = $key;
+      }
+    }
+  }
+
+  // Compare the roles with current user.
+  if (is_array($user->getRoles())) {
+    foreach ($user->getRoles() as $role) {
+      if (array_key_exists($role, $get_roles)) {
+        if ($tracking_type == 'inclusive') {
+          $track_user = TRUE;
+        }
+        if ($tracking_type == 'exclusive') {
+          $track_user = FALSE;
+        }
+        break;
+      }
+    }
+  }
+
+  // Don't track page views in the admin sections, or for certain roles.
+  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
+  if ($is_admin || $track_user == FALSE) {
+    return;
+  }
+
+  $adobe_analytics_js_file_location = $config->get('js_file_location');
+  $js_file_location = $adobe_analytics_js_file_location;
+
+  // Add any custom code snippets if specified and replace any tokens.
+  $context = $adobe_analytics_helper->adobeAnalyticsGetTokenContext();
+  $codesnippet = $adobe_analytics_helper->adobeAnalyticsTokenReplace(
+        $config->get('codesnippet'), $context, array(
+          'clear' => TRUE,
+          'sanitize' => TRUE,
+        )
+    ) . "\n";
+
+  // Format and combine variables in the "right" order
+  // Right order is the code file (list likely to be maintained)
+  // Then admin settings with codesnippet first and finally taxonomy->vars.
+  $extra_variables_formatted = $codesnippet;
+  $adobe_analytics_version = $config->get("version");
+
+  $header = "<!-- AdobeAnalytics code version: ";
+  $header .= $adobe_analytics_version;
+  $header .= "\nCopyright 1996-" . date('Y') . " Adobe, Inc. -->\n";
+  $header .= "<script type=\"text/javascript\" src=\"";
+  $header .= $js_file_location;
+  $header .= "\"></script>\n";
+  $header .= "<script type=\"text/javascript\"><!--\n";
+
+  $footer = '/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
+    ' . "\n";
+  $footer .= 'var s_code=s.t();if(s_code)document.write(s_code)//--></script>' . "\n";
+  $footer .= '<script type="text/javascript"><!--' . "\n";
+  $footer .= "if(navigator.appVersion.indexOf('MSIE')>=0)document.write(unescape('%3C')+'\!-'+'-')" . "\n";
+  $footer .= '//--></script>' . "\n";
+  $nojs = $config->get("image_file_location");
+  if (!empty($nojs)) {
+    $footer .= '<noscript><img src="' . check_url(
+          $nojs . '/' . rand(0, 10000000)
+      ) . '" height="1" width="1" alt=""></noscript>' . "\n";
+  }
+  $footer .= '<!--/DO NOT REMOVE/-->' . "\n";
+  $footer .= '<!-- End AdobeAnalytics code version: ';
+  $footer .= $adobe_analytics_version;
+  $footer .= ' -->' . "\n";
+
+  if ($adobe_analytics_hooked_vars = \Drupal::moduleHandler()->invokeAll(
+        'adobe_analytics_variables', $variables
+    )) {
+    if (isset($adobe_analytics_hooked_vars['header'])) {
+      $header = $adobe_analytics_hooked_vars['header'];
+    }
+    if (isset($adobe_analytics_hooked_vars['variables'])) {
+      $extra_variables_formatted .= $adobe_analytics_helper
+        ->adobeAnalyticsFormatVariables(
+            $adobe_analytics_hooked_vars['variables']
+            );
+    }
+    if (isset($adobe_analytics_hooked_vars['footer'])) {
+      $footer = $adobe_analytics_hooked_vars['footer'];
+    }
+  }
+
+  $variables['adobe_analytics'] = array(
+    'header' => array(
+      '#type' => 'markup',
+      '#markup' => $header,
+    ),
+    'variables' => array(
+      '#type' => 'markup',
+      '#markup' => $extra_variables_formatted,
+    ),
+    'footer' => array(
+      '#type' => 'markup',
+      '#markup' => $footer,
+    ),
+  );
+}
+
+/**
+ * Implements hook_adobe_analytics_variables().
+ */
+function adobe_analytics_adobe_analytics_variables() {
+
+  $variables = array();
+  $config = Drupal::config('adobe_analytics.settings');
+  $adobe_analytics_helper = \Drupal::service('adobe_analytics.adobe_analytics_helper');
+
+  // Include variables set using the context module.
+  /*
+   * @TODO support context module.
+   *
+   * Removing block of code for now until that module is in a stable place to
+   * implement the correct way.  The implementation removed was out of date.
+   */
+
+  // Include variables from the "custom variables" section of the settings form.
+  $settings_variables = $config->get('extra_variables');
+  foreach ($settings_variables as $key => $data) {
+    $variables[$data['name']] = $adobe_analytics_helper->adobeAnalyticsTokenReplace($data['value']);
+  }
+
+  return array('variables' => $variables);
+}
diff --git a/adobe_analytics.permissions.yml b/adobe_analytics.permissions.yml
new file mode 100644
index 0000000..cbc67e2
--- /dev/null
+++ b/adobe_analytics.permissions.yml
@@ -0,0 +1,4 @@
+administer adobe analytics configuration:
+  title: 'Configure Adobe Analytics settings'
+  description: 'Configure Adobe Analytics settings.'
+  restrict access: true
diff --git a/adobe_analytics.routing.yml b/adobe_analytics.routing.yml
new file mode 100644
index 0000000..c9dcc84
--- /dev/null
+++ b/adobe_analytics.routing.yml
@@ -0,0 +1,7 @@
+adobe_analytics.settings:
+  path: '/admin/config/system/adobeanalytics'
+  defaults:
+    _title: 'Adobe Analytics'
+    _form: '\Drupal\adobe_analytics\Form\AdobeAnalyticsAdminSettings'
+  requirements:
+    _permission: 'administer adobe analytics configuration'
diff --git a/adobe_analytics.services.yml b/adobe_analytics.services.yml
new file mode 100644
index 0000000..1cefc92
--- /dev/null
+++ b/adobe_analytics.services.yml
@@ -0,0 +1,4 @@
+services:
+  adobe_analytics.adobe_analytics_helper:
+    class: Drupal\adobe_analytics\AdobeAnalyticsHelper
+    arguments: ['@current_route_match', '@module_handler', '@token']
diff --git a/adobeanalytics.info.yml b/adobeanalytics.info.yml
deleted file mode 100644
index 8457585..0000000
--- a/adobeanalytics.info.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-name: Adobe Analytics
-description: "Adds Adobe Analytics javascript tracking code to your site's pages."
-type: module
-core: 8.x
-configure: adobeanalytics.settings
diff --git a/adobeanalytics.links.menu.yml b/adobeanalytics.links.menu.yml
deleted file mode 100644
index 91c7119..0000000
--- a/adobeanalytics.links.menu.yml
+++ /dev/null
@@ -1,6 +0,0 @@
-adobeanalytics.admin:
-  title: 'Adobe Analytics'
-  description: 'Configure the settings used to integrate AdobeAnalytics analytics.'
-  parent: system.admin_config_system
-  route_name: adobeanalytics.settings
-  weight: 100
diff --git a/adobeanalytics.module b/adobeanalytics.module
deleted file mode 100644
index f626dd8..0000000
--- a/adobeanalytics.module
+++ /dev/null
@@ -1,166 +0,0 @@
-<?php
-
-/**
- * @file
- * Adds the Javascript to the bottom of Drupal page.
- */
-
-use \Drupal\Core\Routing\RouteMatchInterface;
-
-/**
- * Implements hook_help().
- */
-function adobeanalytics_help($route_name, RouteMatchInterface $route_match) {
-
-  switch ($route_name) {
-    case 'help.page.adobeanalytics':
-      return ['#markup' => '<p>' . t('Settings for AdobeAnalytics.') . '</p>'];
-  }
-}
-
-/**
- * Implements template_preprocess_html().
- */
-function adobeanalytics_page_bottom(&$variables) {
-
-  $user = \Drupal::currentUser();
-  $config = \Drupal::config('adobeanalytics.settings');
-  $adobeanalytics_helper = \Drupal::service('adobeanalytics.adobe_analytics_helper');
-
-  // Check if we should track the currently active user's role.
-  $track_user = TRUE;
-  $get_roles = array();
-  $tracking_type = $config->get('role_tracking_type');
-  $stored_roles = $config->get('track_roles');
-  if ($stored_roles) {
-    $get_roles = array();
-    foreach ($stored_roles as $key => $value) {
-      if ($value) {
-        // Get all the selected roles.
-        $get_roles[$key] = $key;
-      }
-    }
-  }
-
-  // Compare the roles with current user.
-  if (is_array($user->getRoles())) {
-    foreach ($user->getRoles() as $role) {
-      if (array_key_exists($role, $get_roles)) {
-        if ($tracking_type == 'inclusive') {
-          $track_user = TRUE;
-        }
-        if ($tracking_type == 'exclusive') {
-          $track_user = FALSE;
-        }
-        break;
-      }
-    }
-  }
-
-  // Don't track page views in the admin sections, or for certain roles.
-  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
-  if ($is_admin || $track_user == FALSE) {
-    return;
-  }
-
-  $adobeanalytics_js_file_location = $config->get('js_file_location');
-  $js_file_location = $adobeanalytics_js_file_location;
-
-  // Add any custom code snippets if specified and replace any tokens.
-  $context = $adobeanalytics_helper->adobeAnalyticsGetTokenContext();
-  $codesnippet = $adobeanalytics_helper->adobeAnalyticsTokenReplace(
-        $config->get('codesnippet'), $context, array(
-          'clear' => TRUE,
-          'sanitize' => TRUE,
-        )
-    ) . "\n";
-
-  // Format and combine variables in the "right" order
-  // Right order is the code file (list likely to be maintained)
-  // Then admin settings with codesnippet first and finally taxonomy->vars.
-  $extra_variables_formatted = $codesnippet;
-  $adobeanalytics_version = $config->get("version");
-
-  $header = "<!-- AdobeAnalytics code version: ";
-  $header .= $adobeanalytics_version;
-  $header .= "\nCopyright 1996-" . date('Y') . " Adobe, Inc. -->\n";
-  $header .= "<script type=\"text/javascript\" src=\"";
-  $header .= $js_file_location;
-  $header .= "\"></script>\n";
-  $header .= "<script type=\"text/javascript\"><!--\n";
-
-  $footer = '/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
-    ' . "\n";
-  $footer .= 'var s_code=s.t();if(s_code)document.write(s_code)//--></script>' . "\n";
-  $footer .= '<script type="text/javascript"><!--' . "\n";
-  $footer .= "if(navigator.appVersion.indexOf('MSIE')>=0)document.write(unescape('%3C')+'\!-'+'-')" . "\n";
-  $footer .= '//--></script>' . "\n";
-  $nojs = $config->get("image_file_location");
-  if (!empty($nojs)) {
-    $footer .= '<noscript><img src="' . check_url(
-          $nojs . '/' . rand(0, 10000000)
-      ) . '" height="1" width="1" alt=""></noscript>' . "\n";
-  }
-  $footer .= '<!--/DO NOT REMOVE/-->' . "\n";
-  $footer .= '<!-- End AdobeAnalytics code version: ';
-  $footer .= $adobeanalytics_version;
-  $footer .= ' -->' . "\n";
-
-  if ($adobeanalytics_hooked_vars = \Drupal::moduleHandler()->invokeAll(
-        'adobeanalytics_variables', $variables
-    )) {
-    if (isset($adobeanalytics_hooked_vars['header'])) {
-      $header = $adobeanalytics_hooked_vars['header'];
-    }
-    if (isset($adobeanalytics_hooked_vars['variables'])) {
-      $extra_variables_formatted .= $adobeanalytics_helper
-        ->adobeAnalyticsFormatVariables(
-            $adobeanalytics_hooked_vars['variables']
-            );
-    }
-    if (isset($adobeanalytics_hooked_vars['footer'])) {
-      $footer = $adobeanalytics_hooked_vars['footer'];
-    }
-  }
-
-  $variables['adobeanalytics'] = array(
-    'header' => array(
-      '#type' => 'markup',
-      '#markup' => $header,
-    ),
-    'variables' => array(
-      '#type' => 'markup',
-      '#markup' => $extra_variables_formatted,
-    ),
-    'footer' => array(
-      '#type' => 'markup',
-      '#markup' => $footer,
-    ),
-  );
-}
-
-/**
- * Implements hook_adobeanalytics_variables().
- */
-function adobeanalytics_adobeanalytics_variables() {
-
-  $variables = array();
-  $config = Drupal::config('adobeanalytics.settings');
-  $adobeanalytics_helper = \Drupal::service('adobeanalytics.adobe_analytics_helper');
-
-  // Include variables set using the context module.
-  /*
-   * @TODO support context module.
-   *
-   * Removing block of code for now until that module is in a stable place to
-   * implement the correct way.  The implementation removed was out of date.
-   */
-
-  // Include variables from the "custom variables" section of the settings form.
-  $settings_variables = $config->get('extra_variables');
-  foreach ($settings_variables as $key => $data) {
-    $variables[$data['name']] = $adobeanalytics_helper->adobeAnalyticsTokenReplace($data['value']);
-  }
-
-  return array('variables' => $variables);
-}
diff --git a/adobeanalytics.permissions.yml b/adobeanalytics.permissions.yml
deleted file mode 100644
index c212065..0000000
--- a/adobeanalytics.permissions.yml
+++ /dev/null
@@ -1,4 +0,0 @@
-administer AdobeAnalytics configuration:
-  title: 'Configure Adobe Analytics settings'
-  description: 'Configure Adobe Analytics settings.'
-  restrict access: true
diff --git a/adobeanalytics.routing.yml b/adobeanalytics.routing.yml
deleted file mode 100644
index c79f979..0000000
--- a/adobeanalytics.routing.yml
+++ /dev/null
@@ -1,7 +0,0 @@
-adobeanalytics.settings:
-  path: '/admin/config/system/adobeanalytics'
-  defaults:
-    _title: 'Adobe Analytics'
-    _form: '\Drupal\adobeanalytics\Form\AdobeanalyticsAdminSettings'
-  requirements:
-    _permission: 'administer AdobeAnalytics configuration'
diff --git a/adobeanalytics.services.yml b/adobeanalytics.services.yml
deleted file mode 100644
index 5eec807..0000000
--- a/adobeanalytics.services.yml
+++ /dev/null
@@ -1,4 +0,0 @@
-services:
-  adobeanalytics.adobe_analytics_helper:
-    class: Drupal\adobeanalytics\AdobeAnalyticsHelper
-    arguments: ['@current_route_match', '@module_handler', '@token']
diff --git a/composer.json b/composer.json
index 6bd6816..990e2d5 100644
--- a/composer.json
+++ b/composer.json
@@ -1,5 +1,5 @@
 {
-    "name": "drupal/adobeanalytics",
+    "name": "drupal/adobe_analytics",
     "description": "Adds Adobe Analytics javascript tracking code to your site's pages.",
     "type": "drupal-module",
     "license": "GPL-2.0+"
diff --git a/config/install/adobe_analytics.settings.yml b/config/install/adobe_analytics.settings.yml
new file mode 100644
index 0000000..a7e1aa9
--- /dev/null
+++ b/config/install/adobe_analytics.settings.yml
@@ -0,0 +1,8 @@
+role_tracking_type: inclusive
+js_file_location: ''
+codesnippet: ''
+version: H.20.3.
+image_file_location: ''
+token_cache_lifetime: 0
+extra_variables: { }
+track_roles: { }
diff --git a/config/install/adobeanalytics.settings.yml b/config/install/adobeanalytics.settings.yml
deleted file mode 100644
index a7e1aa9..0000000
--- a/config/install/adobeanalytics.settings.yml
+++ /dev/null
@@ -1,8 +0,0 @@
-role_tracking_type: inclusive
-js_file_location: ''
-codesnippet: ''
-version: H.20.3.
-image_file_location: ''
-token_cache_lifetime: 0
-extra_variables: { }
-track_roles: { }
diff --git a/config/schema/adobe_analytics.schema.yml b/config/schema/adobe_analytics.schema.yml
new file mode 100644
index 0000000..bab78db
--- /dev/null
+++ b/config/schema/adobe_analytics.schema.yml
@@ -0,0 +1,25 @@
+adobe_analytics.settings:
+  type: config_object
+  label: 'Adobe Analytics settings'
+  mapping:
+    role_tracking_type:
+      type: string
+      label: 'Role Tracking Type'
+    js_file_location:
+      type: string
+      label: 'Javascript file location'
+    codesnippet:
+      type: string
+      label: 'Codesnippet'
+    version:
+      type: string
+      label: 'Version'
+    image_file_location:
+      type: string
+      label: 'Image file location'
+    token_cache_lifetime:
+    extra_variables: { }
+    track_roles: { }
+    admin_only:
+      type: boolean
+      label: 'Only apply to admin pages'
diff --git a/config/schema/adobeanalytics.schema.yml b/config/schema/adobeanalytics.schema.yml
deleted file mode 100644
index 233cbd4..0000000
--- a/config/schema/adobeanalytics.schema.yml
+++ /dev/null
@@ -1,25 +0,0 @@
-adoboanalystics.settings:
-  type: config_object
-  label: 'Adobe Analytics settings'
-  mapping:
-    role_tracking_type:
-      type: string
-      label: 'Role Tracking Type'
-    js_file_location:
-      type: string
-      label: 'Javascript file location'
-    codesnippet:
-      type: string
-      label: 'Codesnippet'
-    version:
-      type: string
-      label: 'Version'
-    image_file_location:
-      type: string
-      label: 'Image file location'
-    token_cache_lifetime:
-    extra_variables: { }
-    track_roles: { }
-    admin_only:
-      type: boolean
-      label: 'Only apply to admin pages'
diff --git a/src/AdobeAnalyticsHelper.php b/src/AdobeAnalyticsHelper.php
index e475067..97b80c8 100644
--- a/src/AdobeAnalyticsHelper.php
+++ b/src/AdobeAnalyticsHelper.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\adobeanalytics;
+namespace Drupal\adobe_analytics;
 
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Routing\CurrentRouteMatch;
@@ -13,7 +13,7 @@ use Drupal\system\Entity\Menu;
 class AdobeAnalyticsHelper {
 
   // To allow tracking by the AdobeAnalytics package.
-  const ADOBEANALYTICS_TOKEN_CACHE = 'adobeanalytics:tag_token_results';
+  const ADOBEANALYTICS_TOKEN_CACHE = 'adobe_analytics:tag_token_results';
 
   /**
    * The CurrentRouteMatch service.
@@ -115,7 +115,7 @@ class AdobeAnalyticsHelper {
    * Used to replace the value.
    *
    * AdobeAnalytics variables the variables need to be
-   * defined with hook_adobeanalytics_variables().
+   * defined with hook_adobe_analytics_variables().
    *
    * @param string $name
    *    Extra variable name.
diff --git a/src/Form/AdobeAnalyticsAdminSettings.php b/src/Form/AdobeAnalyticsAdminSettings.php
new file mode 100644
index 0000000..a18dae4
--- /dev/null
+++ b/src/Form/AdobeAnalyticsAdminSettings.php
@@ -0,0 +1,283 @@
+<?php
+
+namespace Drupal\adobe_analytics\Form;
+
+use Drupal\Core\Form\ConfigFormBase;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Build the configuration form.
+ */
+class AdobeAnalyticsAdminSettings extends ConfigFormBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+
+    return 'adobe_analytics_settings';
+  }
+
+  /**
+   * Get Editable configuratons.
+   *
+   * @return array
+   *   Gets the configuration names that will be editable
+   */
+  protected function getEditableConfigNames() {
+
+    return ['adobe_analytics.settings'];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state) {
+
+    $config = $this->config('adobe_analytics.settings');
+
+    $form['general'] = [
+      '#type' => 'details',
+      '#title' => $this->t('General settings'),
+      '#open' => TRUE,
+      '#weight' => '-10',
+    ];
+
+    $form['general']['js_file_location'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Complete path to AdobeAnalytics Javascript file'),
+      '#default_value' => $config->get('js_file_location'),
+    ];
+
+    $form['general']['image_file_location'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Complete path to AdobeAnalytics Image file'),
+      '#default_value' => $config->get('image_file_location'),
+    ];
+
+    $form['general']['version'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('AdobeAnalytics version (used by adobe_analytics for debugging)'),
+      '#default_value' => $config->get('version'),
+    ];
+
+    $form['general']['token_cache_lifetime'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Token cache lifetime'),
+      '#default_value' => $config->get('token_cache_lifetime'),
+      '#description' => $this->t(
+        'The time, in seconds, that the AdobeAnalytics token
+         cache will be valid for. The token cache will always be cleared at the
+         next system cron run after this time period, or when this form is saved.'
+      ),
+    ];
+
+    $form['roles'] = [
+      '#type' => 'details',
+      '#title' => $this->t('User role tracking'),
+      '#open' => TRUE,
+      '#description' => $this->t('Define which user roles should, or should not be tracked by AdobeAnalytics.'),
+      '#weight' => '-6',
+    ];
+
+    $default_value = ($config->get("role_tracking_type")) ? $config->get("role_tracking_type") : 'inclusive';
+    $form['roles']['role_tracking_type'] = [
+      '#type' => 'select',
+      '#title' => $this->t('Add tracking for specific roles'),
+      '#options' => [
+        'inclusive' => $this->t('Add to the selected roles only'),
+        'exclusive' => $this->t('Add to all roles except the ones selected'),
+      ],
+      '#default_value' => $default_value,
+    ];
+
+    $roles = [];
+    foreach (user_roles() as $role) {
+      $roles[$role->id()] = $role->label();
+    }
+    $config_track_roles = $config->get('track_roles');
+
+    $form['roles']['track_roles'] = [
+      '#type' => 'checkboxes',
+      '#options' => $roles,
+      '#default_value' => empty($config_track_roles) ? array_keys($roles) : $config->get('track_roles'),
+    ];
+
+    $form['variables'] = [
+      '#type' => 'details',
+      '#title' => $this->t('Custom Variables'),
+      '#open' => FALSE,
+      '#description' => $this->t('You can define tracking variables here.'),
+      '#weight' => '-3',
+      '#prefix' => '<div id="variables-details-wrapper">',
+      '#suffix' => '</div>',
+    ];
+    $this->adobeAnalyticsExtraVariablesForm($form, $form_state);
+
+    $form['variables']['actions'] = [
+      '#type' => 'actions',
+    ];
+    $form['variables']['actions']['add_variable'] = [
+      '#type' => 'submit',
+      '#value' => t('Add variable'),
+      '#submit' => array('::addVariable'),
+      '#ajax' => [
+        'callback' => '::addVariableCallback',
+        'wrapper' => 'variables-details-wrapper',
+      ],
+    ];
+
+    $form['advanced'] = [
+      '#type' => 'details',
+      '#title' => $this->t('Advanced'),
+      '#description' => $this->t('You can add custom AdobeAnalytics code here.'),
+      '#open' => FALSE,
+      '#weight' => '-2',
+    ];
+
+    $description = 'Example : <br/> - if ([current-date:custom:N] >= 6) { s.prop5
+         = "weekend"; }<br/>';
+    $description .= '- if ("[current-page:url:path]" == "node") {s.prop9 = "homep
+        age";} else {s.prop9 = "[current-page:title]";}';
+    $form['advanced']['codesnippet'] = [
+      '#type' => 'textarea',
+      '#title' => $this->t('JavaScript Code'),
+      '#default_value' => $config->get('codesnippet'),
+      '#rows' => 15,
+      '#description' => $description,
+    ];
+
+    $form['advanced']['tokens'] = [
+      '#theme' => 'token_tree_link',
+      '#token_types' => ['node', 'menu', 'term', 'user'],
+      '#global_types' => TRUE,
+      '#click_insert' => TRUE,
+      '#dialog' => TRUE,
+    ];
+
+    return parent::buildForm($form, $form_state);
+  }
+
+  /**
+   * Form for getting extra variables.
+   */
+  public function adobeAnalyticsExtraVariablesForm(&$form, FormStateInterface $form_state) {
+
+    $config = $this->config('adobe_analytics.settings');
+    $existing_vars = $config->get('extra_variables');
+
+    if (empty($existing_vars)) {
+      $existing_vars = [];
+    }
+
+    $values = $form_state->get('variables');
+    $existing_variables = isset($values) ? $values : $existing_vars;
+
+    $headers = [$this->t('Name'), $this->t('Value')];
+
+    $form['variables']['variables'] = [
+      '#type' => 'table',
+      '#header' => $headers,
+    ];
+
+    foreach ($existing_variables as $key => $data) {
+      $form = $this->adobeAnalyticsExtraVariableInputs($form, $key, $data);
+    }
+
+    // Always add a blank line at the end.
+    $form = $this->adobeAnalyticsExtraVariableInputs($form, count($existing_variables));
+
+    $form['variables']['tokens'] = [
+      '#theme' => 'token_tree_link',
+      '#token_types' => ['node', 'menu', 'term', 'user'],
+      '#global_types' => TRUE,
+      '#click_insert' => TRUE,
+      '#dialog' => TRUE,
+    ];
+  }
+
+  /**
+   * Get inputs in the extra variables form.
+   */
+  public function adobeAnalyticsExtraVariableInputs($form, $index, $data = []) {
+
+    $form['variables']['variables'][$index]['name'] = [
+      '#type' => 'textfield',
+      '#size' => 40,
+      '#maxlength' => 40,
+      '#title_display' => 'invisible',
+      '#title' => $this->t('Name'),
+      '#default_value' => isset($data['name']) ? $data['name'] : '',
+      '#attributes' => ['class' => ['field-variable-name']],
+    ];
+    $form['variables']['variables'][$index]['value'] = [
+      '#type' => 'textfield',
+      '#size' => 40,
+      '#maxlength' => 40,
+      '#title_display' => 'invisible',
+      '#title' => $this->t('Value'),
+      '#default_value' => isset($data['value']) ? $data['value'] : '',
+      '#attributes' => ['class' => ['field-variable-value']],
+    ];
+
+    if (empty($data)) {
+      $form['variables']['variables'][$index]['name']['#description'] = $this->t('Example: prop1');
+      $form['variables']['variables'][$index]['value']['#description'] = $this->t('Example: [current-page:title]');
+    }
+    return $form;
+  }
+
+  /**
+   * Callback for both ajax-enabled buttons.
+   *
+   * Selects and returns the fieldset with the names in it.
+   */
+  public function addVariableCallback(array &$form, FormStateInterface $form_state) {
+
+    // Leave the fieldset open.
+    $form['variables']['#open'] = TRUE;
+    return $form['variables'];
+  }
+
+  /**
+   * Submit handler for the "add-one-more" button.
+   *
+   * Increments the max counter and causes a rebuild.
+   */
+  public function addVariable(array &$form, FormStateInterface $form_state) {
+
+    $input = $form_state->getUserInput();
+    $form_state->set('variables', $input['variables']);
+    $form_state->setRebuild();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+
+    $config = $this->config('adobe_analytics.settings');
+
+    // Save extra variables.
+    $extra_vars = [];
+    foreach ($form_state->getValue('variables') as $variable) {
+      if (!empty($variable['name']) && !empty($variable['value'])) {
+        $extra_vars[] = ['name' => $variable['name'], 'value' => $variable['value']];
+      }
+    }
+
+    // Save all the config variables.
+    $config->set('extra_variables', $extra_vars)
+      ->set('js_file_location', $form_state->getValue('js_file_location'))
+      ->set('image_file_location', $form_state->getValue('image_file_location'))
+      ->set('version', $form_state->getValue('version'))
+      ->set('token_cache_lifetime', $form_state->getValue('token_cache_lifetime'))
+      ->set('codesnippet', $form_state->getValue('codesnippet'))
+      ->set('role_tracking_type', $form_state->getValue('role_tracking_type'))
+      ->set('track_roles', $form_state->getValue('track_roles'))
+      ->save();
+
+    parent::submitForm($form, $form_state);
+  }
+
+}

