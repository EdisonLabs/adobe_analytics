<?php

/**
 * @file
 * Adds the Javascript to the bottom of Drupal page.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_help().
 */
function adobe_analytics_help($route_name, RouteMatchInterface $route_match) {

  switch ($route_name) {
    case 'help.page.adobe_analytics':
      return ['#markup' => '<p>' . t('Settings for AdobeAnalytics.') . '</p>'];
  }
}

/**
 * Implements hook_theme().
 */
function adobe_analytics_theme($existing, $type, $theme, $path) {
  return [
    'analytics_code' => [
      'variables' => [
        'general_status' => NULL,
        'js_file_location' => NULL,
        'formatted_vars' => NULL,
        'version' => NULL,
        'image_location' => NULL,
        'amazon_status' => NULL,
        's_code_config_path' => NULL,
        's_code_path' => NULL,
        'footer_js_code' => NULL,
        'custom_tracking_js_before' => NULL,
        'custom_tracking_js_after' => NULL,
        'tag_status' => NULL,
        'tag_manager_footer_js' => NULL,
        'data_layer_status' => NULL,
        'data_layer_json' => NULL,
        'custom_js' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_page_bottom().
 */
function adobe_analytics_page_bottom(&$variables) {
  \Drupal::routeMatch()->getRouteObject()->setOption('_no_big_pipe', TRUE);
  $variables['adobe_analytics'] = [
    '#lazy_builder' => [
      'adobe_analytics.adobe_analytics_helper:renderMarkup',
      [],
    ],
    '#create_placeholder' => TRUE,
    '#cache' => [
      'contexts' => ['user.roles'],
      'tags' => \Drupal::config('adobe_analytics.settings')->getCacheTags(),
    ],
  ];
}

/**
 * Implements hook_adobe_analytics_variables().
 */
function adobe_analytics_adobe_analytics_variables() {

  $variables = [];
  $config = Drupal::config('adobe_analytics.settings');
  $adobe_analytics_helper = \Drupal::service('adobe_analytics.adobe_analytics_helper');

  // Include variables set using the context module.
  /*
   * @TODO support context module.
   *
   * Removing block of code for now until that module is in a stable place to
   * implement the correct way.  The implementation removed was out of date.
   */

  // Include variables from the "custom variables" section of the settings form.
  $settings_variables = $config->get('extra_variables');
  foreach ($settings_variables as $data) {
    $variables[$data['name']] = $adobe_analytics_helper->adobeAnalyticsTokenReplace($data['value']);
  }

  return ['variables' => $variables];
}

/**
 * Implements hook_library_info_build().
 */
function adobe_analytics_library_info_build() {
  $libraries = [];
  if (Drupal::moduleHandler()->moduleExists('adobe_analytics')) {
    $config = \Drupal::config('adobe_analytics.settings');
    if ($config->get('installation_mode') == 'cdn' && $config->get('cdn_install_type') == 'tag') {
      $environment = 'development';
      if (\Drupal::config('adobe_analytics')->get('mode') == 'prod') {
        $environment = 'production';
      }
      $tag_manager_script = $config->get($environment . "_tag_manager_container_path");

      $libraries['tag_manager'] = [
        'header' => TRUE,
        'js' => [
          $tag_manager_script => ['type' => 'external'],
        ],
      ];
    }
  }
  return $libraries;
}

/**
 * Implements hook_page_attachments_alter().
 */
function adobe_analytics_page_attachments_alter(array &$attachments) {

  // Attach the tag manager container path in the HTML head.
  $attachments['#attached']['library']['tag_manager'] = 'adobe_analytics/tag_manager';

  // Add the Report Suite tag.
  $config = \Drupal::config('adobe_analytics.report_suite');
  if ($config->get('report_suites_enabled') == 1) {
    $mode = $config->get('report_suites_mode');
    $development_report_suites = $config->get('development_report_suites');
    $production_report_suites = $config->get('production_report_suites');
    $development_domains = $config->get('development_domains');
    $production_domains = $config->get('production_domains');
    $site_section_prefix = $config->get('site_section_prefix');
    $site_section_delimiter = $config->get('site_section_delimiter');
    $page_name_base = $config->get('page_name_base');
    $page_name_prefix = $config->get('page_name_prefix');
    $page_name_delimiter = $config->get('page_name_delimiter');
    $page_name_homepage = $config->get('page_name_homepage');

    $pfconfig = <<<EOT
  var pfConfig = {
    mode: '$mode',
    reportSuites: {
      dev: '$development_report_suites',
      prod: '$production_report_suites'
    },
    domains: {
      dev: '$development_domains',
      prod: '$production_domains'
    },
    siteSection: {
      prefix: '$site_section_prefix',
      delimiter: '$site_section_delimiter'
    },
    pageName: {
      base: '$page_name_base',
      prefix: '$page_name_prefix',
      delimiter: '$page_name_delimiter',
      homePage: '$page_name_homepage'
    },
};
EOT;

    $attachments['#attached']['library']['urlconfig'] = 'adobe_analytics/urlconfig';

    /*
     * Need to use Markup::create() so that the delimiters don't get filtered.
     * @TODO find a better way to do this.
     */
    $attachments['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'script',
        '#value' => Markup::create($pfconfig),
      ],
      'adobe_analytics_report_suites',
    ];
  }
}
