<?php

/**
 * @file
 * Adds the Javascript to the bottom of Drupal page.
 */

use \Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\Core\Render\Markup;
use \Drupal\Component\Utility\Html;
use \Drupal\Component\Utility\UrlHelper;

/**
 * Implements hook_help().
 */
function adobe_analytics_help($route_name, RouteMatchInterface $route_match) {

  switch ($route_name) {
    case 'help.page.adobe_analytics':
      return ['#markup' => '<p>' . t('Settings for AdobeAnalytics.') . '</p>'];
  }
}

/**
 * Implements template_preprocess_html().
 */
function adobe_analytics_page_bottom(&$variables) {

  $user = \Drupal::currentUser();
  $config = \Drupal::config('adobe_analytics.settings');
  $helper = \Drupal::service('adobe_analytics.adobe_analytics_helper');

  // Check if we should track the currently active user's role.
  $track_user = TRUE;
  $get_roles = array();
  $tracking_type = $config->get('role_tracking_type');
  $stored_roles = $config->get('track_roles');
  if ($stored_roles) {
    $get_roles = array();
    foreach ($stored_roles as $key => $value) {
      if ($value) {
        // Get all the selected roles.
        $get_roles[$key] = $key;
      }
    }
  }

  // Compare the roles with current user.
  if (is_array($user->getRoles())) {
    foreach ($user->getRoles() as $role) {
      if (array_key_exists($role, $get_roles)) {
        if ($tracking_type == 'inclusive') {
          $track_user = TRUE;
        }
        if ($tracking_type == 'exclusive') {
          $track_user = FALSE;
        }
        break;
      }
    }
  }

  // Don't track page views in the admin sections, or for certain roles.
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if ($is_admin || $track_user == FALSE) {
    return;
  }

  $js_file_location = $config->get('js_file_location');
  $codesnippet = $config->get('codesnippet');
  $version = $config->get("version");
  $nojs = $config->get("image_file_location");

  // Format and combine variables in the "right" order
  // Right order is the code file (list likely to be maintained)
  // Then admin settings with codesnippet first and finally taxonomy->vars.
  $formatted_vars = '';
  $adobe_analytics_hooked_vars = \Drupal::moduleHandler()->invokeAll('adobe_analytics_variables', $variables);

  if (!empty($adobe_analytics_hooked_vars['header'])) {
    $formatted_vars = $helper->adobeAnalyticsFormatVariables($adobe_analytics_hooked_vars['header']);
  }

  if (!empty($codesnippet)) {
    // Add any custom code snippets if specified and replace any tokens.
    $context = $helper->adobeAnalyticsGetTokenContext();
    $formatted_vars .= $helper->adobeAnalyticsTokenReplace(
      $config->get('codesnippet'), $context, array(
        'clear' => TRUE,
        'sanitize' => TRUE,
      )
    ) . "\n";
  }

  if (!empty($adobe_analytics_hooked_vars['variables'])) {
    $formatted_vars .= $helper->adobeAnalyticsFormatVariables($adobe_analytics_hooked_vars['variables']);
  }

  if (!empty($adobe_analytics_hooked_vars['footer'])) {
    $formatted_vars .= $helper->adobeAnalyticsFormatVariables($adobe_analytics_hooked_vars['footer']);
  }

  $variables['adobe_analytics']['comments'] = array(
    '#prefix' => Markup::create("<!-- "),
    '#plain_text' => "AdobeAnalytics code version: $version \nCopyright 1996-" . date('Y') . " Adobe, Inc.",
    '#suffix' => Markup::create(" -->\n"),
  );

  $variables['adobe_analytics']['external_js'] = array(
    '#type' => 'html_tag',
    '#tag' => 'script',
    '#value' => '',
    '#attributes' => array('src' => $js_file_location),
  );

  $variables['adobe_analytics']['scode_js'] = array(
    '#prefix' => Markup::create("\n<script><!-- "),
    '#markup' => "\n$formatted_vars \n/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/\n var s_code=s.t();if(s_code)document.write(s_code)",
    '#suffix' => Markup::create(" //--></script>\n"),
  );

  $variables['adobe_analytics']['ie_js'] = array(
    '#prefix' => Markup::create("<script><!-- "),
    '#markup' => Markup::create("\n if(navigator.appVersion.indexOf('MSIE')>=0)document.write(unescape('%3C')+'\!-'+'-')\n"),
    '#suffix' => Markup::create(" //--></script>\n"),
  );

  if ($nojs) {
    $img = array(
      '#type' => 'html_tag',
      '#tag' => 'img',
      '#attributes' => array(
        'src' => Html::escape(UrlHelper::stripDangerousProtocols($nojs)) . '/' . rand(0, 10000000),
        'height' => 1,
        'width' => 1,
      ),
    );

    $variables['adobe_analytics']['noscript'] = array(
      '#type' => 'html_tag',
      '#tag' => 'noscript',
      '#value' => \Drupal::service('renderer')->renderPlain($img),
    );
  }

  $variables['adobe_analytics']['warning'] = array(
    '#prefix' => Markup::create("<!--"),
    '#plain_text' => "/DO NOT REMOVE/",
    '#suffix' => Markup::create("-->\n"),
  );

  $variables['adobe_analytics']['end_version'] = array(
    '#prefix' => Markup::create("<!-- "),
    '#plain_text' => "End AdobeAnalytics code version: $version",
    '#suffix' => Markup::create(" -->\n"),
  );
}

/**
 * Implements hook_adobe_analytics_variables().
 */
function adobe_analytics_adobe_analytics_variables() {

  $variables = array();
  $config = Drupal::config('adobe_analytics.settings');
  $adobe_analytics_helper = \Drupal::service('adobe_analytics.adobe_analytics_helper');

  // Include variables set using the context module.
  /*
   * @TODO support context module.
   *
   * Removing block of code for now until that module is in a stable place to
   * implement the correct way.  The implementation removed was out of date.
   */

  // Include variables from the "custom variables" section of the settings form.
  $settings_variables = $config->get('extra_variables');
  foreach ($settings_variables as $key => $data) {
    $variables[$data['name']] = $adobe_analytics_helper->adobeAnalyticsTokenReplace($data['value']);
  }

  return array('variables' => $variables);
}
