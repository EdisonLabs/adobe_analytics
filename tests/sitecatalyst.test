<?php
/**
 * @file
 * Test file for the SiteCatalyst module.
 */

class siteCatalystBaseTest extends DrupalWebTestCase {
  /**
   * Implementation of setUp().
   */
  function setUp() {
    // Enable a couple modules.
    parent::setUp('sitecatalyst');
    menu_rebuild();

    // Create an admin user with all the permissions needed to run tests.
    $this->admin_user = $this->drupalCreateUser(array('administer SiteCatalyst configuration', 'access administration pages'));
    $this->drupalLogin($this->admin_user);

    // Set some default settings.
    \Drupal::configFactory()->getEditable('sitecatalyst.settings')->set("sitecatalyst_js_file_location", 'http://www.example.com/js/s_code_remote_h.js')->save();
    \Drupal::configFactory()->getEditable('sitecatalyst.settings')->set("sitecatalyst_image_file_location", 'http://examplecom.112.2O7.net/b/ss/examplecom/1/H.20.3--NS/0')->save();
    \Drupal::configFactory()->getEditable('sitecatalyst.settings')->set("sitecatalyst_version", 'H.20.3.')->save();
  }

  function assertTrackingCode() {
    $this->assertRaw("<!-- SiteCatalyst code version: ", 'The SiteCatalyst code was found.');
    // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/sitecatalyst.settings.yml and config/schema/sitecatalyst.schema.yml.
$this->assertRaw(\Drupal::config('sitecatalyst.settings')->get("sitecatalyst_js_file_location"), 'The SiteCatalyst js file was properly referenced.');
    // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/sitecatalyst.settings.yml and config/schema/sitecatalyst.schema.yml.
$this->assertRaw(\Drupal::config('sitecatalyst.settings')->get("sitecatalyst_image_file_location"), 'The SiteCatalyst backup image was properly referenced.');
    // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/sitecatalyst.settings.yml and config/schema/sitecatalyst.schema.yml.
$this->assertRaw(\Drupal::config('sitecatalyst.settings')->get("sitecatalyst_version"), 'The correct SiteCatalyst version was found.');
  }

  function assertNoTrackingCode() {
    $this->assertNoRaw("<!-- SiteCatalyst code version: ", 'The SiteCatalyst code was not found.');
    // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/sitecatalyst.settings.yml and config/schema/sitecatalyst.schema.yml.
$this->assertNoRaw(\Drupal::config('sitecatalyst.settings')->get("sitecatalyst_js_file_location"), 'The SiteCatalyst js file was properly omitted.');
    // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/sitecatalyst.settings.yml and config/schema/sitecatalyst.schema.yml.
$this->assertNoRaw(\Drupal::config('sitecatalyst.settings')->get("sitecatalyst_image_file_location"), 'The SiteCatalyst backup image was properly omitted.');
    // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/sitecatalyst.settings.yml and config/schema/sitecatalyst.schema.yml.
$this->assertNoRaw(\Drupal::config('sitecatalyst.settings')->get("sitecatalyst_version"), 'The SiteCatalyst version was omitted.');
  }

  function assertSiteCatalystVar($name, $value, $message = '') {
    $message = empty($message) ? 'The SiteCatalyst variable was correctly included.' : $message;

    $edit = array(
      'sitecatalyst_variables[0][name]' => $name,
      'sitecatalyst_variables[0][value]' => $value,
    );
    $this->drupalPost('admin/config/system/sitecatalyst', $edit, t('Save configuration'));
    $this->drupalGet('node');
    $this->assertRaw($name . '="' . $value . '";', $message);
  }

  function assertInvalidSiteCatalystVar($name, $value, $message = '') {
    $message = empty($message) ? 'The SiteCalalyst variable was correctly reported as invalid.' : $message;
    $edit = array(
      'sitecatalyst_variables[0][name]' => $name,
      'sitecatalyst_variables[0][value]' => $value,
    );
    $this->drupalPost('admin/config/system/sitecatalyst', $edit, t('Save configuration'));
    $this->assertText(t('This is not a valid variable name. It must start with a letter, $ or _ and cannot contain spaces.'), $message);
  }

}

class siteCatalystGeneralTest extends siteCatalystBaseTest {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('SiteCatalyst General Tests'),
      'description' => t('Tests the general functionality of the SiteCatalyst module.'),
      'group' => t('SiteCatalyst'),
    );
  }

  function testSiteCatalystTrackingCode() {
    $this->drupalGet('<front>');
    $this->assertTrackingCode();
  }

  function testSiteCatalystVariables() {
    // Test that variables with valid names are added properly.
    $valid_vars = array(
      $this->randomName(8),
      $this->randomName(8) . '7',
      '$' . $this->randomName(8),
      '_' . $this->randomName(8),
    );
    foreach ($valid_vars as $name) {
      $this->assertSiteCatalystVar($name, $this->randomName(8));
    }

    // Test that invalid variable names are not allowed.
    $invalid_vars = array(
      '7' . $this->randomName(8),
      $this->randomName(8) . ' ' . $this->randomName(8),
      '#' . $this->randomName(8),
    );
    foreach ($invalid_vars as $name) {
      $this->assertInvalidSiteCatalystVar($name, $this->randomName(8));
    }
  }

  function testSiteCatalystRolesTracking() {
    \Drupal::configFactory()->getEditable('sitecatalyst.settings')->set('sitecatalyst_track_authenticated_user', 1)->save();
    \Drupal::configFactory()->getEditable('sitecatalyst.settings')->set('sitecatalyst_role_tracking_type', 'inclusive')->save();

    $this->drupalGet('<front>');
    $this->assertTrackingCode();

    \Drupal::configFactory()->getEditable('sitecatalyst.settings')->set('sitecatalyst_role_tracking_type', 'exclusive')->save();
    $this->drupalGet('<front>');
    $this->assertNoTrackingCode();
  }
}
